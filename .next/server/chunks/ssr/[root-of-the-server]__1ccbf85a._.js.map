{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///Users/bkshmax/Desktop/SplitSpreeApp/Splitspree/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///Users/bkshmax/Desktop/SplitSpreeApp/Splitspree/src/ai/flows/ai-chat-assistant.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI chat assistant for bill splitting.\n *\n * Handles ALL user request variations:\n * - Assigning one/multiple items to users\n * - Splitting items by percent, amount, or evenly\n * - Assigning all items to all/selected users\n * - Removing assignments\n * - Clearing all splits\n * - Bulk edits\n * - Updating prices\n * - Undo actions\n * - Clarifying ambiguous commands\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\n// ---------- SCHEMAS ----------\nconst AIChatAssistantInputSchema = z.object({\n  command: z.string().describe('The command from the user.'),\n  users: z.string().describe('JSON string of all users in the session, including their IDs and names.'),\n  items: z.string().describe('JSON string of all items from all receipts, including their IDs, names, and prices.')\n});\nexport type AIChatAssistantInput = z.infer<typeof AIChatAssistantInputSchema>;\n\n// Expanded action types with safe percentage/amount schema\nconst ActionSchema = z.object({\n  type: z.enum([\n    'SET_ITEM_ASSIGNEES',       // Assign item to specific users\n    'SET_ITEM_PRICE',           // Update price of item\n    'CLEAR_ITEM_ASSIGNEES',     // Remove all assignments from item\n    'ASSIGN_ALL_ITEMS',         // Assign all items to specific users\n    'SPLIT_ITEM_PERCENT',       // Split an item by percentage\n    'SPLIT_ITEM_AMOUNT',        // Split an item by fixed amounts\n    'RESET_ALL_SPLITS',         // Clear all splits in the bill\n    'UNDO_LAST_ACTION'          // Undo last action\n  ]),\n  payload: z.object({\n    itemId: z.string().optional().describe('ID of a single item'),\n    itemIds: z.array(z.string()).optional().describe('IDs of multiple items'),\n    userIds: z.array(z.string()).optional().describe('IDs of users involved in the action'),\n    price: z.number().optional().describe('Updated price for SET_ITEM_PRICE'),\n    percentages: z.array(z.object({\n      userId: z.string().describe('User ID'),\n      percentage: z.number().describe('Percentage for this user')\n    })).optional().describe('List of percentage splits per user'),\n    amounts: z.array(z.object({\n      userId: z.string().describe('User ID'),\n      amount: z.number().describe('Fixed amount for this user')\n    })).optional().describe('List of fixed amount splits per user'),\n  }),\n});\n\nconst AIChatAssistantOutputSchema = z.object({\n  response: z.string().describe('The text response from the AI chat assistant.'),\n  actionToConfirm: ActionSchema.optional().describe('An action that the user needs to confirm before it is executed.'),\n});\nexport type AIChatAssistantOutput = z.infer<typeof AIChatAssistantOutputSchema>;\n\n// ---------- ENTRY FUNCTION ----------\nexport async function aiChatAssistant(input: AIChatAssistantInput): Promise<AIChatAssistantOutput> {\n  return aiChatAssistantFlow(input);\n}\n\n// ---------- PROMPT ----------\nconst prompt = ai.definePrompt({\n  name: 'aiChatAssistantPrompt',\n  input: { schema: AIChatAssistantInputSchema },\n  output: { schema: AIChatAssistantOutputSchema },\n  prompt: `\nYou are SplitSpree AI Assistant — an advanced bill-splitting AI.\nYour role is to interpret *any possible* natural language command from the user and return:\n- A conversational \\`response\\` (confirmation or clarification)\n- An optional \\`actionToConfirm\\` object with type + payload that the app will execute if confirmed.\n\nYou have these users:\n{{{users}}}\nYou have these items with prices:\n{{{items}}}\n\n-----------------\n## SUPPORTED ACTIONS\nYou can return ONLY these action types:\n1. SET_ITEM_ASSIGNEES — Assign one/more items to specific users\n2. SET_ITEM_PRICE — Change price of one item\n3. CLEAR_ITEM_ASSIGNEES — Remove all users from one/more items\n4. ASSIGN_ALL_ITEMS — Assign all items to specific users\n5. SPLIT_ITEM_PERCENT — Assign by percentage (array of {userId, percentage})\n6. SPLIT_ITEM_AMOUNT — Assign by fixed amounts (array of {userId, amount})\n7. RESET_ALL_SPLITS — Remove all assignments for all items\n8. UNDO_LAST_ACTION — Undo the last confirmed action\n\n-----------------\n## RULES & EDGE CASES\n\n1. If items list is empty → no actions, reply: \"Please upload a receipt first.\"\n2. If item name in command not found → no action, suggest correct names.\n3. If user in command not found → no action, list valid users.\n4. If command vague (missing who/what) → no action, ask for missing info.\n5. Support references like \"me\", \"everyone\", \"everyone except John\".\n6. Support multiple items in one request.\n7. Support price updates with currency symbols or decimals.\n8. If multiple unrelated actions in one request → pick most important, confirm, suggest doing others after.\n9. Always clarify before destructive actions (RESET_ALL_SPLITS, CLEAR_ITEM_ASSIGNEES).\n10. Maintain conversational memory for follow-ups like \"do the same for fries\".\n11. If unsure → clarify instead of guessing.\n\n-----------------\n## EXAMPLES\n\nUser: \"Split pizza between me and Sarah\"\n→ response: \"Split 'Pizza' between you and Sarah?\"\n→ actionToConfirm: { type: \"SET_ITEM_ASSIGNEES\", payload: { itemId: \"pizza-id\", userIds: [\"me-id\",\"sarah-id\"] } }\n\nUser: \"Give all items to everyone\"\n→ response: \"Assign all items to all users?\"\n→ actionToConfirm: { type: \"ASSIGN_ALL_ITEMS\", payload: { userIds: [\"id1\",\"id2\",\"id3\"] } }\n\nUser: \"Sarah pays 70% for pizza, John 30%\"\n→ response: \"Split 'Pizza' 70% to Sarah, 30% to John?\"\n→ actionToConfirm: { type: \"SPLIT_ITEM_PERCENT\", payload: { itemId: \"pizza-id\", percentages: [{ \"userId\": \"sarah-id\", \"percentage\": 70 }, { \"userId\": \"john-id\", \"percentage\": 30 }] } }\n\nUser: \"Undo last\"\n→ response: \"Undo the last change?\"\n→ actionToConfirm: { type: \"UNDO_LAST_ACTION\", payload: {} }\n\n-----------------\nNow respond to:\n{{{command}}}\n`\n});\n\n// ---------- FLOW ----------\nconst aiChatAssistantFlow = ai.defineFlow(\n  {\n    name: 'aiChatAssistantFlow',\n    inputSchema: AIChatAssistantInputSchema,\n    outputSchema: AIChatAssistantOutputSchema,\n  },\n  async input => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;;;;;;;CAaC,GAED;AACA;AAAA;;;;;;AAEA,gCAAgC;AAChC,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGA,2DAA2D;AAC3D,MAAM,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5B,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QACX;QACA;QACA;QACA;QACA;QACA;QACA;QACA,mBAA4B,mBAAmB;KAChD;IACD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAChB,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;QACvC,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,QAAQ,CAAC;QACjD,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,QAAQ,CAAC;QACjD,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;QACtC,aAAa,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC5B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAClC,IAAI,QAAQ,GAAG,QAAQ,CAAC;QACxB,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACxB,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC5B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B,IAAI,QAAQ,GAAG,QAAQ,CAAC;IAC1B;AACF;AAEA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,iBAAiB,aAAa,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAIO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,+BAA+B;AAC/B,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ;IAA2B;IAC5C,QAAQ;QAAE,QAAQ;IAA4B;IAC9C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DX,CAAC;AACD;AAEA,6BAA6B;AAC7B,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IAlFoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"sources":["file:///Users/bkshmax/Desktop/SplitSpreeApp/Splitspree/src/ai/flows/parse-receipt.ts"],"sourcesContent":["// src/ai/flows/parse-receipt.ts\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for parsing receipt images and extracting data.\n *\n * - parseReceipt - A function that takes a receipt image as input and returns the extracted data.\n * - ParseReceiptInput - The input type for the parseReceipt function.\n * - ParseReceiptOutput - The return type for the parseReceipt function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ParseReceiptInputSchema = z.object({\n  receiptDataUri: z\n    .string()\n    .describe(\n      \"A receipt image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ParseReceiptInput = z.infer<typeof ParseReceiptInputSchema>;\n\nconst ParseReceiptOutputSchema = z.object({\n  storeName: z.string().describe('The name of the store.'),\n  date: z.string().describe('The date on the receipt.'),\n  items: z\n    .array(\n      z.object({\n        name: z.string().describe('The name of the item.'),\n        price: z.number().describe('The total price of the item, accounting for quantity.'),\n        description: z.string().describe('A clarified, common name for the item. If the item has quantity/unit details, include them. E.g., \"Snack Bars ($1.50 each x 3)\" or \"Avocados ($0.99 per lb x 2.5)\".'),\n      })\n    )\n    .describe('A list of items on the receipt.'),\n  subtotal: z.number().describe('The subtotal of the receipt.'),\n  tax: z.number().describe('The tax amount on the receipt.'),\n  tip: z.number().describe('The tip amount on the receipt.'),\n  total: z.number().describe('The total amount on the receipt.'),\n});\nexport type ParseReceiptOutput = z.infer<typeof ParseReceiptOutputSchema>;\n\nexport async function parseReceipt(input: ParseReceiptInput): Promise<ParseReceiptOutput> {\n  return parseReceiptFlow(input);\n}\n\nconst parseReceiptPrompt = ai.definePrompt({\n  name: 'parseReceiptPrompt',\n  input: {schema: ParseReceiptInputSchema},\n  output: {schema: ParseReceiptOutputSchema},\n  prompt: `You are an expert receipt parser. First, verify the image is actually a receipt. If it's not a receipt, respond with \"NOT_A_RECEIPT\". Otherwise, extract information with the highest accuracy.\n\n**Pricing Rules:**\n- For each line item, you MUST extract the final total price for that item.\n- If an item lists a quantity and a price-per-unit (e.g., \"3 @ $0.70\"), you MUST calculate the total price (e.g., $2.10). Do not use the unit price as the final price.\n- If a line only shows a single price, use that as the total price for the item.\n\n**Item Description Rules:**\n- For each item, you must provide a 'description'.\n- The description should be a clarified, common name for the item based on the receipt name.\n- If the item name on the receipt is cryptic or abbreviated (e.g., \"HRI CL CHS\"), use your knowledge to provide a more common name (e.g., \"Hillshire Farm Cheddar Cheese\").\n- If the name is already clear and common (e.g., \"Apple\"), just repeat the name for the description.\n- **Important - Handling Quantity and Unit Price:**\n  - If a line item includes details about quantity and unit price, you MUST include this in the description.\n  - **Items by Count:** For items sold by discrete units, use the format \"($<unit_price> each x <quantity>)\". Example: For \"3 SNACK BARS @ $1.50\", the description should include \"($1.50 each x 3)\".\n  - **Items by Weight/Volume:** For items sold by weight (e.g., lb, kg, oz) or volume, use the format \"($<unit_price> per <unit> x <quantity>)\". Example: For \"2.5 lb BANANAS @ $0.50/LB\", the description should include \"($0.50 per lb x 2.5)\".\n- If there is no quantity information, just provide the clarified item name.\n- Your description MUST be confident and MUST NOT end with a question mark.\n\nReceipt Image: {{media url=receiptDataUri}}\n\nReturn the data in JSON format, adhering strictly to the rules above.\n`,\n});\n\nconst parseReceiptFlow = ai.defineFlow(\n  {\n    name: 'parseReceiptFlow',\n    inputSchema: ParseReceiptInputSchema,\n    outputSchema: ParseReceiptOutputSchema,\n  },\n  async input => {\n    const {output} = await parseReceiptPrompt(input);\n    \n    if (typeof output === 'string' && output === 'NOT_A_RECEIPT') {\n      throw new Error('The uploaded image is not a receipt. Please upload a clear photo of a receipt.');\n    }\n    \n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;AAGhC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,uIAAA,CAAA,IAAC,CACL,KAAK,CACJ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,IAED,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACzC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAuB;IACvC,QAAQ;QAAC,QAAQ;IAAwB;IACzC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBX,CAAC;AACD;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,mBAAmB;IAE1C,IAAI,OAAO,WAAW,YAAY,WAAW,iBAAiB;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;;;IA/CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 486, "column": 0}, "map": {"version":3,"sources":["file:///Users/bkshmax/Desktop/SplitSpreeApp/Splitspree/.next-internal/server/app/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {aiChatAssistant as '40b6d00e0f7bce7064d70ac119c32694599d3ddffb'} from 'ACTIONS_MODULE0'\nexport {parseReceipt as '40ba6bf6c5326ccdcfde81d6d5302e056e949c364c'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":["file:///Users/bkshmax/Desktop/SplitSpreeApp/Splitspree/src/app/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwR,GACrT,sDACA","debugId":null}},
    {"offset": {"line": 552, "column": 0}, "map": {"version":3,"sources":["file:///Users/bkshmax/Desktop/SplitSpreeApp/Splitspree/src/app/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoQ,GACjS,kCACA","debugId":null}},
    {"offset": {"line": 566, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}