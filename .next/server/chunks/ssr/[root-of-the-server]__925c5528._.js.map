{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/itiza/Desktop/SplitSpree/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/itiza/Desktop/SplitSpree/src/ai/flows/parse-receipt.ts"],"sourcesContent":["// src/ai/flows/parse-receipt.ts\n'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for parsing receipt images and extracting data.\n *\n * - parseReceipt - A function that takes a receipt image as input and returns the extracted data.\n * - ParseReceiptInput - The input type for the parseReceipt function.\n * - ParseReceiptOutput - The return type for the parseReceipt function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ParseReceiptInputSchema = z.object({\n  receiptDataUri: z\n    .string()\n    .describe(\n      \"A receipt image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ParseReceiptInput = z.infer<typeof ParseReceiptInputSchema>;\n\nconst ParseReceiptOutputSchema = z.object({\n  storeName: z.string().describe('The name of the store.'),\n  date: z.string().describe('The date on the receipt.'),\n  items: z\n    .array(\n      z.object({\n        name: z.string().describe('The name of the item.'),\n        price: z.number().describe('The total price of the item, accounting for quantity.'),\n        description: z.string().describe('A clarified, common name for the item. If the item has quantity/unit details, include them. E.g., \"Snack Bars ($1.50 each x 3)\" or \"Avocados ($0.99 per lb x 2.5)\".'),\n      })\n    )\n    .describe('A list of items on the receipt.'),\n  subtotal: z.number().describe('The subtotal of the receipt.'),\n  tax: z.number().describe('The tax amount on the receipt.'),\n  tip: z.number().describe('The tip amount on the receipt.'),\n  total: z.number().describe('The total amount on the receipt.'),\n});\nexport type ParseReceiptOutput = z.infer<typeof ParseReceiptOutputSchema>;\n\nexport async function parseReceipt(input: ParseReceiptInput): Promise<ParseReceiptOutput> {\n  return parseReceiptFlow(input);\n}\n\nconst parseReceiptPrompt = ai.definePrompt({\n  name: 'parseReceiptPrompt',\n  input: {schema: ParseReceiptInputSchema},\n  output: {schema: ParseReceiptOutputSchema},\n  prompt: `You are an expert receipt parser. First, verify the image is actually a receipt. If it's not a receipt, respond with \"NOT_A_RECEIPT\". Otherwise, extract information with the highest accuracy.\n\n**Pricing Rules:**\n- For each line item, you MUST extract the final total price for that item.\n- If an item lists a quantity and a price-per-unit (e.g., \"3 @ $0.70\"), you MUST calculate the total price (e.g., $2.10). Do not use the unit price as the final price.\n- If a line only shows a single price, use that as the total price for the item.\n\n**Item Description Rules:**\n- For each item, you must provide a 'description'.\n- The description should be a clarified, common name for the item based on the receipt name.\n- If the item name on the receipt is cryptic or abbreviated (e.g., \"HRI CL CHS\"), use your knowledge to provide a more common name (e.g., \"Hillshire Farm Cheddar Cheese\").\n- If the name is already clear and common (e.g., \"Apple\"), just repeat the name for the description.\n- **Important - Handling Quantity and Unit Price:**\n  - If a line item includes details about quantity and unit price, you MUST include this in the description.\n  - **Items by Count:** For items sold by discrete units, use the format \"($<unit_price> each x <quantity>)\". Example: For \"3 SNACK BARS @ $1.50\", the description should include \"($1.50 each x 3)\".\n  - **Items by Weight/Volume:** For items sold by weight (e.g., lb, kg, oz) or volume, use the format \"($<unit_price> per <unit> x <quantity>)\". Example: For \"2.5 lb BANANAS @ $0.50/LB\", the description should include \"($0.50 per lb x 2.5)\".\n- If there is no quantity information, just provide the clarified item name.\n- Your description MUST be confident and MUST NOT end with a question mark.\n\nReceipt Image: {{media url=receiptDataUri}}\n\nReturn the data in JSON format, adhering strictly to the rules above.\n`,\n});\n\nconst parseReceiptFlow = ai.defineFlow(\n  {\n    name: 'parseReceiptFlow',\n    inputSchema: ParseReceiptInputSchema,\n    outputSchema: ParseReceiptOutputSchema,\n  },\n  async input => {\n    const {output} = await parseReceiptPrompt(input);\n    \n    if (typeof output === 'string' && output === 'NOT_A_RECEIPT') {\n      throw new Error('The uploaded image is not a receipt. Please upload a clear photo of a receipt.');\n    }\n    \n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;AAGhC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,OAAO,uIAAA,CAAA,IAAC,CACL,KAAK,CACJ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,IAED,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACzC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAuB;IACvC,QAAQ;QAAC,QAAQ;IAAwB;IACzC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBX,CAAC;AACD;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,mBAAmB;IAE1C,IAAI,OAAO,WAAW,YAAY,WAAW,iBAAiB;QAC5D,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;;;IA/CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/itiza/Desktop/SplitSpree/.next-internal/server/app/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {parseReceipt as '40ba6bf6c5326ccdcfde81d6d5302e056e949c364c'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/itiza/Desktop/SplitSpree/src/app/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwR,GACrT,sDACA","debugId":null}},
    {"offset": {"line": 389, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/itiza/Desktop/SplitSpree/src/app/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoQ,GACjS,kCACA","debugId":null}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}